{
  "version": 3,
  "sources": ["../src/shared.ts"],
  "sourcesContent": ["import { stdout } from 'supports-color'\nimport { Time } from 'cosmokit'\n\nconst c16 = [6, 2, 3, 4, 5, 1]\nconst c256 = [\n  20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62,\n  63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113,\n  129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n  169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200,\n  201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221,\n]\n\nfunction isAggregateError(error: any): error is Error & { errors: Error[] } {\n  return error instanceof Error && Array.isArray((error as any)['errors'])\n}\n\nnamespace Logger {\n  export interface LevelConfig {\n    base: number\n    [K: string]: Level\n  }\n\n  export type Level = number | LevelConfig\n  export type Function = (format: any, ...param: any[]) => void\n  export type Type = 'success' | 'error' | 'info' | 'warn' | 'debug'\n  export type Formatter = (value: any, target: Logger.Target, logger: Logger) => any\n\n  export interface LabelStyle {\n    width?: number\n    margin?: number\n    align?: 'left' | 'right'\n  }\n\n  export interface Target {\n    /**\n     * - 0: no color support\n     * - 1: 16 color support\n     * - 2: 256 color support\n     * - 3: truecolor support\n     */\n    colors?: false | number\n    showDiff?: boolean\n    showTime?: string\n    label?: LabelStyle\n    maxLength?: number\n    print(text: string): void\n  }\n}\n\ninterface Logger extends Record<Logger.Type, Logger.Function> {}\n\nclass Logger {\n  // log levels\n  static readonly SILENT = 0\n  static readonly SUCCESS = 1\n  static readonly ERROR = 1\n  static readonly INFO = 2\n  static readonly WARN = 2\n  static readonly DEBUG = 3\n\n  // global config\n  static timestamp = 0\n  static targets: Logger.Target[] = [{\n    colors: stdout && stdout.level,\n    print(text: string) {\n      console.log(text)\n    },\n  }]\n\n  // global registry\n  static formatters: Record<string, Logger.Formatter> = Object.create(null)\n  static instances: Record<string, Logger> = Object.create(null)\n\n  static format(name: string, formatter: Logger.Formatter) {\n    this.formatters[name] = formatter\n  }\n\n  static levels: Logger.LevelConfig = {\n    base: 2,\n  }\n\n  static color(target: Logger.Target, code: number, value: any, decoration = '') {\n    if (!target.colors) return '' + value\n    return `\\u001b[3${code < 8 ? code : '8;5;' + code}${target.colors >= 2 ? decoration : ''}m${value}\\u001b[0m`\n  }\n\n  static code(name: string, target: Logger.Target) {\n    let hash = 0\n    for (let i = 0; i < name.length; i++) {\n      hash = ((hash << 3) - hash) + name.charCodeAt(i)\n      hash |= 0\n    }\n    const colors = target.colors! >= 2 ? c256 : target.colors! >= 1 ? c16 : []\n    return colors[Math.abs(hash) % colors.length]\n  }\n\n  constructor(public name: string) {\n    if (name in Logger.instances) return Logger.instances[name]\n\n    Logger.instances[name] = this\n    this.createMethod('success', '[S]', Logger.SUCCESS)\n    this.createMethod('error', '[E]', Logger.ERROR)\n    this.createMethod('info', '[I]', Logger.INFO)\n    this.createMethod('warn', '[W]', Logger.WARN)\n    this.createMethod('debug', '[D]', Logger.DEBUG)\n  }\n\n  extend = (namespace: string) => {\n    return new Logger(`${this.name}:${namespace}`)\n  }\n\n  createMethod(name: Logger.Type, prefix: string, minLevel: number) {\n    this[name] = (...args) => {\n      if (args.length === 1 && isAggregateError(args[0])) {\n        args[0].errors.forEach(error => this[name](error))\n        return\n      }\n\n      if (this.level < minLevel) return\n      const now = Date.now()\n      for (const target of Logger.targets) {\n        const space = ' '.repeat(target.label?.margin ?? 1)\n        let indent = 3 + space.length, output = ''\n        if (target.showTime) {\n          indent += target.showTime.length + space.length\n          output += Logger.color(target, 8, Time.template(target.showTime)) + space\n        }\n        const label = this.color(target, this.name, ';1')\n        const padLength = (target.label?.width ?? 0) + label.length - this.name.length\n        if (target.label?.align === 'right') {\n          output += label.padStart(padLength) + space + prefix + space\n          indent += (target.label.width ?? 0) + space.length\n        } else {\n          output += prefix + space + label.padEnd(padLength) + space\n        }\n        output += this.format(target, indent, ...args)\n        if (target.showDiff) {\n          const diff = Logger.timestamp && now - Logger.timestamp\n          output += this.color(target, ' +' + Time.format(diff))\n        }\n        const { maxLength = 10240 } = target\n        if (output.length > maxLength) {\n          output = output.slice(0, maxLength) + '...'\n        }\n        target.print(output)\n      }\n      Logger.timestamp = now\n    }\n  }\n\n  private color(target: Logger.Target, value: any, decoration = '') {\n    const code = Logger.code(this.name, target)\n    return Logger.color(target, code, value, decoration)\n  }\n\n  private format(target: Logger.Target, indent: number, ...args: any[]) {\n    if (args[0] instanceof Error) {\n      args[0] = args[0].stack || args[0].message\n      args.unshift('%s')\n    } else if (typeof args[0] !== 'string') {\n      args.unshift('%o')\n    }\n\n    let format: string = args.shift()\n    format = format.replace(/%([a-zA-Z%])/g, (match, char) => {\n      if (match === '%%') return '%'\n      const formatter = Logger.formatters[char]\n      if (typeof formatter === 'function') {\n        const value = args.shift()\n        return formatter(value, target, this)\n      }\n      return match\n    }).replace(/\\n/g, '\\n' + ' '.repeat(indent))\n\n    for (const arg of args) {\n      format += ' ' + Logger.formatters['o'](arg, target, this)\n    }\n\n    return format\n  }\n\n  get level() {\n    const paths = this.name.split(':')\n    let config: Logger.Level = Logger.levels\n    do {\n      config = config[paths.shift()!] ?? config['base']\n    } while (paths.length && typeof config === 'object')\n    return config as number\n  }\n\n  set level(value) {\n    const paths = this.name.split(':')\n    let config = Logger.levels\n    while (paths.length > 1) {\n      const name = paths.shift()!\n      const value = config[name]\n      if (typeof value === 'object') {\n        config = value\n      } else {\n        config = config[name] = { base: value ?? config.base }\n      }\n    }\n    config[paths[0]] = value\n  }\n}\n\nLogger.format('s', (value) => value)\nLogger.format('d', (value) => +value)\nLogger.format('j', (value) => JSON.stringify(value))\nLogger.format('c', (value, target, logger) => {\n  return Logger.color(target, Logger.code(logger.name, target), value)\n})\nLogger.format('C', (value, target) => {\n  return Logger.color(target, 15, value, ';1')\n})\n\nexport = Logger\n"],
  "mappings": "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",
  "names": ["value"]
}
