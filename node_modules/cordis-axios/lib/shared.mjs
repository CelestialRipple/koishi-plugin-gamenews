var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// satori/packages/axios/src/shared.ts
import { Context } from "cordis";
import { trimSlash } from "cosmokit";
import axios from "axios";
import Schema from "schemastery";
var Quester = class {
  constructor(ctx, config) {
    return Object.getPrototypeOf(this).constructor.create(config.request);
  }
  extend(newConfig) {
    return this.constructor.create({
      ...this.config,
      ...newConfig,
      headers: {
        ...this.config.headers,
        ...newConfig.headers
      }
    });
  }
  get(url, config) {
    return this("GET", url, config);
  }
  delete(url, config) {
    return this("DELETE", url, config);
  }
  post(url, data, config) {
    return this("POST", url, { ...config, data });
  }
  put(url, data, config) {
    return this("PUT", url, { ...config, data });
  }
  patch(url, data, config) {
    return this("PATCH", url, { ...config, data });
  }
  async head(url, config) {
    const response = await this.axios(url, { ...config, method: "HEAD" });
    return response.headers;
  }
  ws(url, options) {
    return new WebSocket(url);
  }
};
__name(Quester, "Quester");
((Quester2) => {
  Quester2.isAxiosError = axios.isAxiosError;
  Quester2.Config = Schema.object({
    timeout: Schema.natural().role("ms").description("等待连接建立的最长时间。")
  }).description("请求设置");
  function createConfig(endpoint) {
    return Schema.object({
      endpoint: Schema.string().role("link").description("要连接的服务器地址。").default(typeof endpoint === "string" ? endpoint : null).required(typeof endpoint === "boolean" ? endpoint : false),
      headers: Schema.dict(String).description("要附加的额外请求头。"),
      ...this.Config.dict
    }).description("请求设置");
  }
  Quester2.createConfig = createConfig;
  __name(createConfig, "createConfig");
  Quester2.prepare = /* @__PURE__ */ __name((config) => ({
    timeout: config.timeout,
    headers: config.headers
  }), "prepare");
  function create(config = {}) {
    const options = this.prepare(config);
    const endpoint = config.endpoint = trimSlash(config.endpoint || "");
    const request = /* @__PURE__ */ __name(async (url, config2 = {}) => axios({
      ...options,
      ...config2,
      url: endpoint + url,
      headers: {
        ...options.headers,
        ...config2.headers
      }
    }), "request");
    const http = /* @__PURE__ */ __name(async (method, url, config2) => {
      const response = await request(url, { ...config2, method });
      return response.data;
    }, "http");
    Object.setPrototypeOf(http, this.prototype);
    for (const key of ["extend", "get", "delete", "post", "put", "patch", "head", "ws"]) {
      http[key] = this.prototype[key].bind(http);
    }
    http.config = config;
    http.axios = request;
    return http;
  }
  Quester2.create = create;
  __name(create, "create");
})(Quester || (Quester = {}));
Context.service("http", Quester);
var shared_default = Quester;
export {
  shared_default as default
};
//# sourceMappingURL=shared.mjs.map
