{
  "version": 3,
  "sources": ["../src/shared.ts"],
  "sourcesContent": ["import { Context } from 'cordis'\nimport { Dict, trimSlash } from 'cosmokit'\nimport { ClientRequestArgs } from 'http'\nimport axios, { AxiosRequestConfig, AxiosResponse, Method } from 'axios'\nimport * as types from 'axios'\nimport Schema from 'schemastery'\n\ndeclare module 'cordis' {\n  interface Context {\n    http: Quester\n  }\n\n  namespace Context {\n    interface Config {\n      request?: Quester.Config\n    }\n  }\n}\n\ninterface Quester {\n  <T = any>(method: Method, url: string, config?: AxiosRequestConfig): Promise<T>\n  axios<T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>>\n  config: Quester.Config\n}\n\nclass Quester {\n  constructor(ctx: Context, config: Context.Config) {\n    return Object.getPrototypeOf(this).constructor.create(config.request)\n  }\n\n  extend(newConfig: Quester.Config): Quester {\n    return (this.constructor as typeof Quester).create({\n      ...this.config,\n      ...newConfig,\n      headers: {\n        ...this.config.headers,\n        ...newConfig.headers,\n      },\n    })\n  }\n\n  get<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    return this('GET', url, config)\n  }\n\n  delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    return this('DELETE', url, config)\n  }\n\n  post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this('POST', url, { ...config, data })\n  }\n\n  put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this('PUT', url, { ...config, data })\n  }\n\n  patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this('PATCH', url, { ...config, data })\n  }\n\n  async head(url: string, config?: AxiosRequestConfig): Promise<Dict<string>> {\n    const response = await this.axios(url, { ...config, method: 'HEAD' })\n    return response.headers\n  }\n\n  ws(url: string, options?: ClientRequestArgs) {\n    return new WebSocket(url) as any as import('ws').WebSocket\n  }\n}\n\nnamespace Quester {\n  export type Method = types.Method\n  export type AxiosResponse = types.AxiosResponse\n  export type AxiosRequestConfig = types.AxiosRequestConfig\n\n  export const isAxiosError = axios.isAxiosError\n\n  export interface Config {\n    headers?: Dict\n    endpoint?: string\n    timeout?: number\n    proxyAgent?: string\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    timeout: Schema.natural().role('ms').description('等待连接建立的最长时间。'),\n  }).description('请求设置')\n\n  export function createConfig(this: typeof Quester, endpoint: string | boolean): Schema<Config> {\n    return Schema.object({\n      endpoint: Schema.string().role('link').description('要连接的服务器地址。')\n        .default(typeof endpoint === 'string' ? endpoint : null)\n        .required(typeof endpoint === 'boolean' ? endpoint : false),\n      headers: Schema.dict(String).description('要附加的额外请求头。'),\n      ...this.Config.dict,\n    }).description('请求设置')\n  }\n\n  export const prepare = (config: Quester.Config): AxiosRequestConfig => ({\n    timeout: config.timeout,\n    headers: config.headers,\n  })\n\n  export function create(this: typeof Quester, config: Quester.Config = {}) {\n    const options = this.prepare(config)\n    const endpoint = config.endpoint = trimSlash(config.endpoint || '')\n\n    const request = async (url: string, config: AxiosRequestConfig = {}) => axios({\n      ...options,\n      ...config,\n      url: endpoint + url,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      },\n    })\n\n    const http = (async (method, url, config) => {\n      const response = await request(url, { ...config, method })\n      return response.data\n    }) as Quester\n\n    Object.setPrototypeOf(http, this.prototype)\n    for (const key of ['extend', 'get', 'delete', 'post', 'put', 'patch', 'head', 'ws']) {\n      http[key] = this.prototype[key].bind(http)\n    }\n\n    http.config = config\n    http.axios = request\n    return http\n  }\n}\n\nContext.service('http', Quester)\n\nexport default Quester\n"],
  "mappings": "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",
  "names": ["Quester", "axios", "Schema", "config"]
}
