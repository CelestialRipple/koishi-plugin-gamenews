/// <reference types="node" />
/// <reference types="ws" />
import { Context } from 'cordis';
import { Dict } from 'cosmokit';
import { ClientRequestArgs } from 'http';
import { AxiosRequestConfig, AxiosResponse, Method } from 'axios';
import * as types from 'axios';
import Schema from 'schemastery';
declare module 'cordis' {
    interface Context {
        http: Quester;
    }
    namespace Context {
        interface Config {
            request?: Quester.Config;
        }
    }
}
export declare function base64ToArrayBuffer(base64: string): ArrayBuffer | Uint8Array;
export interface Quester {
    <T = any>(method: Method, url: string, config?: AxiosRequestConfig): Promise<T>;
    axios<T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>>;
    config: Quester.Config;
}
export declare class Quester {
    constructor(ctx: Context, config: Context.Config);
    extend(newConfig: Quester.Config): Quester;
    get<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>;
    delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<T>;
    post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>;
    put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>;
    patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T>;
    head(url: string, config?: AxiosRequestConfig): Promise<Dict<string>>;
    ws(url: string, options?: ClientRequestArgs): import("ws").WebSocket;
    prepare(): AxiosRequestConfig;
    file(url: string): Promise<Quester.File>;
}
export declare namespace Quester {
    type Method = types.Method;
    type AxiosResponse = types.AxiosResponse;
    type AxiosRequestConfig = types.AxiosRequestConfig;
    interface File {
        mime?: string;
        filename: string;
        data: ArrayBuffer;
    }
    const isAxiosError: <T = any, D = any>(payload: any) => payload is types.AxiosError<T, D>;
    interface Config {
        headers?: Dict;
        endpoint?: string;
        timeout?: number;
        proxyAgent?: string;
    }
    const Config: Schema<Config>;
    function createConfig(this: typeof Quester, endpoint: string | boolean): Schema<Config>;
    function create(this: typeof Quester, config?: Quester.Config): Quester;
}
export default Quester;
