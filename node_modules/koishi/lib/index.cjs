var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// koishi/packages/koishi/src/index.ts
var src_exports = {};
__export(src_exports, {
  Assets: () => Assets,
  Patch: () => Patch,
  Router: () => import_satori.Router,
  WebSocketLayer: () => import_satori.WebSocketLayer,
  scope: () => scope
});
module.exports = __toCommonJS(src_exports);
var import_core3 = require("@koishijs/core");
var import_satori = require("@satorijs/satori");

// koishi/packages/koishi/src/assets.ts
var import_core = require("@koishijs/core");
var import_utils = require("@koishijs/utils");
var import_crypto = require("crypto");
var import_path = require("path");
var import_file_type = __toESM(require("file-type"));
import_core.Context.service("assets");
(0, import_utils.defineProperty)(import_core.Context.Config, "Assets", import_core.Schema.object({
  whitelist: import_core.Schema.array(import_core.Schema.string().required().role("link")).description("不处理的白名单 URL 列表。")
}).description("资源设置"));
var _Assets = class extends import_core.Service {
  constructor(ctx) {
    super(ctx, "assets");
    this.ctx = ctx;
    this.types = _Assets.types;
  }
  async transform(content) {
    return await import_core.segment.transformAsync(content, Object.fromEntries(this.types.map((type) => {
      return [type, async (data) => {
        if (this.ctx.root.config.assets.whitelist.some((prefix) => data.url.startsWith(prefix))) {
          return (0, import_core.segment)(type, data);
        } else {
          return (0, import_core.segment)(type, { url: await this.upload(data.url, data.file) });
        }
      }];
    })));
  }
  async analyze(url, name = "") {
    const file = await this.ctx.http.file(url);
    const buffer = Buffer.from(file.data);
    const hash = (0, import_crypto.createHash)("sha1").update(buffer).digest("hex");
    if (name) {
      name = (0, import_path.basename)(name);
      if (!name.startsWith(".")) {
        name = `-${name}`;
      }
    } else {
      const fileType = await import_file_type.default.fromBuffer(buffer);
      if (fileType) {
        name = `.${fileType.ext}`;
      }
    }
    return { buffer, hash, name, filename: `${hash}${name}` };
  }
};
var Assets = _Assets;
__name(Assets, "Assets");
Assets.types = ["image", "audio", "video"];

// koishi/packages/koishi/src/patch.ts
var import_core2 = require("@koishijs/core");
var import_ns_require = __toESM(require("ns-require"));
var Patch = class {
  constructor(ctx) {
    var _a, _b;
    (_b = (_a = ctx.root).baseDir) != null ? _b : _a.baseDir = process.cwd();
  }
};
__name(Patch, "Patch");
import_core2.Context.service("$patch", Patch);
var scope = (0, import_ns_require.default)({
  namespace: "koishi",
  prefix: "plugin",
  official: "koishijs"
});
var plugin = import_core2.Context.prototype.plugin;
import_core2.Context.prototype.plugin = function(entry, config) {
  if (typeof entry === "string") {
    entry = scope.require(entry);
  }
  return plugin.call(this, entry, config);
};

// koishi/packages/koishi/src/index.ts
__reExport(src_exports, require("@koishijs/core"), module.exports);
__reExport(src_exports, require("@koishijs/utils"), module.exports);
import_core3.Context.Config.list.push(import_core3.Schema.object({
  assets: import_core3.Context.Config.Assets
}));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Assets,
  Patch,
  Router,
  WebSocketLayer,
  scope
});
//# sourceMappingURL=index.cjs.map
