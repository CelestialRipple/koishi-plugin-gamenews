{
  "version": 3,
  "sources": ["../src/index.ts", "../src/listen.ts", "../src/axios.ts", "../src/router.ts"],
  "sourcesContent": ["import { Context, Logger, Quester, Schema } from '@satorijs/core'\nimport { defineProperty, trimSlash } from 'cosmokit'\nimport { listen } from './listen'\n\nexport * from '@satorijs/core'\nexport * from 'cosmokit'\nexport * from './axios'\nexport * from './router'\n\ndeclare module '@satorijs/core' {\n  namespace Context {\n    interface Config extends Config.Network {}\n\n    namespace Config {\n      interface Network {\n        host?: string\n        port?: number\n        maxPort?: number\n        selfUrl?: string\n      }\n\n      interface Static extends Schema<Config> {\n        Network: Schema<Network>\n      }\n    }\n  }\n}\n\ndefineProperty(Context.Config, 'Network', Schema.object({\n  host: Schema.string().default('localhost').description('要监听的 IP 地址。如果将此设置为 `0.0.0.0` 将监听所有地址，包括局域网和公网地址。'),\n  port: Schema.natural().max(65535).description('要监听的初始端口号。'),\n  maxPort: Schema.natural().max(65535).description('允许监听的最大端口号。'),\n  selfUrl: Schema.string().role('link').description('应用暴露在公网的地址。'),\n}).description('网络设置'))\n\nContext.Config.list.unshift(Context.Config.Network)\nContext.Config.list.push(Schema.object({\n  request: Quester.Config,\n}))\n\nconst logger = new Logger('app')\n\nconst start = Context.prototype.start\nContext.prototype.start = async function (this: Context, ...args) {\n  if (this.root.config.selfUrl) {\n    this.root.config.selfUrl = trimSlash(this.root.config.selfUrl)\n  }\n\n  if (this.root.config.port) {\n    const { host, port } = this.root.config\n    await listen(this.router._http, this.root.config)\n    logger.info('server listening at %c', `http://${host}:${port}`)\n    this.on('dispose', () => {\n      logger.info('http server closing')\n      this.router._ws?.close()\n      this.router._http?.close()\n    })\n  }\n\n  this.decline(['selfUrl', 'host', 'port', 'maxPort'])\n\n  return start.call(this, ...args)\n}\n", "import net from 'net'\n\nexport interface ListenOptions {\n  host?: string\n  port?: number\n  maxPort?: number\n}\n\nexport function listen(server: net.Server, { host, port, maxPort = port }: ListenOptions) {\n  return new Promise<number>((resolve, reject) => {\n    function onListen() {\n      server.removeListener('error', onError)\n      resolve(port)\n    }\n\n    function onError(err: NodeJS.ErrnoException) {\n      server.removeListener('listening', onListen)\n      if (!(err.code == 'EADDRINUSE' || err.code == 'EACCES')) {\n        return reject(err)\n      }\n      port++\n      if (port > maxPort) {\n        return reject(new Error('No open ports available'))\n      }\n      testPort()\n    }\n\n    function testPort() {\n      server.once('error', onError)\n      server.once('listening', onListen)\n      server.listen(port, host)\n    }\n\n    testPort()\n  })\n}\n", "import { Quester } from '@satorijs/core'\nimport { defineProperty, Dict } from 'cosmokit'\nimport { ClientRequestArgs } from 'http'\nimport { Agent } from 'agent-base'\nimport { WebSocket } from 'ws'\nimport { fromBuffer } from 'file-type'\nimport { basename } from 'path'\nimport { promises as fs } from 'fs'\nimport { fileURLToPath } from 'url'\nimport createHttpProxyAgent from 'http-proxy-agent'\nimport createHttpsProxyAgent from 'https-proxy-agent'\nimport createSocksProxyAgent from 'socks-proxy-agent'\nimport Schema from 'schemastery'\n\nconst oldFile = Quester.prototype.file\nQuester.prototype.file = async function file(this: Quester, url: string) {\n  // for backward compatibility\n  if (url.startsWith('file://')) {\n    const data = await fs.readFile(fileURLToPath(url))\n    const result = await fromBuffer(data)\n    return { mime: result?.mime, filename: basename(url), data }\n  }\n  return oldFile.call(this, url)\n}\n\nQuester.prototype.ws = function ws(this: Quester, url: string, options: ClientRequestArgs = {}) {\n  return new WebSocket(url, {\n    agent: getAgent(this.config.proxyAgent),\n    handshakeTimeout: this.config.timeout,\n    ...options,\n    headers: {\n      ...this.config.headers,\n      ...options.headers,\n    },\n  })\n}\n\nconst _prepare = Quester.prototype.prepare\nQuester.prototype.prepare = function prepare(this: Quester) {\n  const options = _prepare.call(this)\n  options.httpAgent = getAgent(this.config.proxyAgent)\n  options.httpsAgent = getAgent(this.config.proxyAgent)\n  return options\n}\n\ndefineProperty(Quester, 'Config', Schema.object({\n  ...Quester.Config.dict,\n  proxyAgent: Schema.string().description('使用的代理服务器地址。'),\n}).description('请求设置'))\n\ntype CreateAgent = (opts: string) => Agent\n\nconst agents: Dict<Agent> = Object.create(null)\nconst proxies: Dict<CreateAgent> = Object.create(null)\n\nexport function register(protocols: string[], callback: CreateAgent) {\n  for (const protocol of protocols) {\n    proxies[protocol] = callback\n  }\n}\n\nregister(['http'], createHttpProxyAgent)\nregister(['https'], createHttpsProxyAgent)\nregister(['socks', 'socks4', 'socks4a', 'socks5', 'socks5h'], createSocksProxyAgent)\n\nexport function getAgent(url: string) {\n  if (!url) return\n  if (agents[url]) return agents[url]\n  const { protocol } = new URL(url)\n  const callback = proxies[protocol.slice(0, -1)]\n  return agents[url] ||= callback(url)\n}\n", "import { Context } from '@satorijs/core'\nimport { MaybeArray, remove } from 'cosmokit'\nimport { createServer, IncomingMessage, Server } from 'http'\nimport { pathToRegexp } from 'path-to-regexp'\nimport parseUrl from 'parseurl'\nimport WebSocket from 'ws'\nimport KoaRouter from '@koa/router'\nimport Koa from 'koa'\n\ndeclare module 'koa' {\n  // koa-bodyparser\n  interface Request {\n    body?: any\n    rawBody?: string\n  }\n}\n\ndeclare module '@satorijs/core' {\n  interface Context {\n    router: Router\n  }\n}\n\ntype WebSocketCallback = (socket: WebSocket, request: IncomingMessage) => void\n\nexport class WebSocketLayer {\n  clients = new Set<WebSocket>()\n  regexp: RegExp\n\n  constructor(private router: Router, path: MaybeArray<string | RegExp>, public callback?: WebSocketCallback) {\n    this.regexp = pathToRegexp(path)\n  }\n\n  accept(socket: WebSocket, request: IncomingMessage) {\n    if (!this.regexp.test(parseUrl(request).pathname)) return\n    this.clients.add(socket)\n    socket.on('close', () => {\n      this.clients.delete(socket)\n    })\n    this.callback?.(socket, request)\n    return true\n  }\n\n  close() {\n    remove(this.router.wsStack, this)\n    for (const socket of this.clients) {\n      socket.close()\n    }\n  }\n}\n\nexport class Router extends KoaRouter {\n  _http?: Server\n  _ws?: WebSocket.Server\n  wsStack: WebSocketLayer[] = []\n\n  constructor(ctx: Context) {\n    super()\n\n    // create server\n    const koa = new Koa()\n    koa.use(require('koa-bodyparser')())\n    koa.use(this.routes())\n    koa.use(this.allowedMethods())\n\n    this._http = createServer(koa.callback())\n    this._ws = new WebSocket.Server({\n      server: this._http,\n    })\n\n    this._ws.on('connection', (socket, request) => {\n      for (const manager of this.wsStack) {\n        if (manager.accept(socket, request)) return\n      }\n      socket.close()\n    })\n  }\n\n  /**\n   * hack into router methods to make sure that koa middlewares are disposable\n   */\n  register(...args: Parameters<KoaRouter['register']>) {\n    const layer = super.register(...args)\n    const context = this[Context.current]\n    context?.state.disposables.push(() => {\n      remove(this.stack, layer)\n    })\n    return layer\n  }\n\n  ws(path: MaybeArray<string | RegExp>, callback?: WebSocketCallback) {\n    const layer = new WebSocketLayer(this, path, callback)\n    this.wsStack.push(layer)\n    const context = this[Context.current]\n    context?.state.disposables.push(() => layer.close())\n    return layer\n  }\n}\n\nContext.service('router', Router)\n"],
  "mappings": "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",
  "names": ["import_core", "import_cosmokit", "fs", "Schema", "createHttpProxyAgent", "createHttpsProxyAgent", "createSocksProxyAgent", "import_core", "import_cosmokit", "import_ws", "parseUrl", "KoaRouter", "Koa", "WebSocket"]
}
