/// <reference types="node" />
/// <reference types="koa__router" />
import { Context } from '@satorijs/core';
import { MaybeArray } from 'cosmokit';
import { IncomingMessage, Server } from 'http';
import WebSocket from 'ws';
import KoaRouter from '@koa/router';
declare module 'koa' {
    interface Request {
        body?: any;
        rawBody?: string;
    }
}
declare module '@satorijs/core' {
    interface Context {
        router: Router;
    }
}
declare type WebSocketCallback = (socket: WebSocket, request: IncomingMessage) => void;
export declare class WebSocketLayer {
    private router;
    callback?: WebSocketCallback;
    clients: Set<WebSocket>;
    regexp: RegExp;
    constructor(router: Router, path: MaybeArray<string | RegExp>, callback?: WebSocketCallback);
    accept(socket: WebSocket, request: IncomingMessage): boolean;
    close(): void;
}
export declare class Router extends KoaRouter {
    _http?: Server;
    _ws?: WebSocket.Server;
    wsStack: WebSocketLayer[];
    constructor(ctx: Context);
    /**
     * hack into router methods to make sure that koa middlewares are disposable
     */
    register(...args: Parameters<KoaRouter['register']>): KoaRouter.Layer;
    ws(path: MaybeArray<string | RegExp>, callback?: WebSocketCallback): WebSocketLayer;
}
export {};
