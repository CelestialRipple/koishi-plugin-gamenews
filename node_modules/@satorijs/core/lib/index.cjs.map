{
  "version": 3,
  "sources": ["../src/index.ts", "../src/selector.ts", "../src/session.ts", "../src/bot.ts", "../src/adapter.ts", "../src/message.ts"],
  "sourcesContent": ["import * as cordis from 'cordis'\nimport { Awaitable, Dict } from 'cosmokit'\nimport { Bot } from './bot'\nimport { Selector } from './selector'\nimport { SendOptions, Session } from './session'\nimport Schema from 'schemastery'\nimport Logger from 'reggol'\nimport Quester from 'cordis-axios'\nimport segment from '@satorijs/element'\nimport { Fragment, Render, escape, unescape } from '@satorijs/element'\n\nexport { Fragment, Render, escape, unescape }\nexport { Schema, Logger, segment, segment as Element, segment as h, Quester }\n\nexport * from './bot'\nexport * from './adapter'\nexport * from './message'\nexport * from './selector'\nexport * from './session'\nexport * from './universal'\n\ndeclare global {\n  namespace Satori {\n    type Genres = 'friend' | 'channel' | 'guild' | 'guild-member' | 'guild-role' | 'guild-file' | 'guild-emoji'\n    type Actions = 'added' | 'deleted' | 'updated'\n\n    interface Session {}\n\n    interface Events extends Record<`${Genres}-${Actions}`, {}> {\n      'message': {}\n      'message-deleted': {}\n      'message-updated': {}\n      'reaction-added': {}\n      'reaction-deleted': {}\n      'reaction-deleted/one': {}\n      'reaction-deleted/all': {}\n      'reaction-deleted/emoji': {}\n      'send': {}\n      'friend-request': {}\n      'guild-request': {}\n      'guild-member-request': {}\n      'guild-member/role': {}\n      'guild-member/ban': {}\n      'guild-member/nickname': {}\n      'notice/poke': {}\n      'notice/lucky-king': {}\n      'notice/honor': {}\n      'notice/honor/talkative': {}\n      'notice/honor/performer': {}\n      'notice/honor/emotion': {}\n    }\n  }\n}\n\ntype EventCallback<T = void, R extends any[] = []> = (this: Session, session: Session, ...args: R) => T\n\nexport interface Events<C extends Context = Context> extends cordis.Events<C>, Record<keyof Satori.Events, EventCallback> {\n  'before-send': EventCallback<Awaitable<void | boolean>, [SendOptions]>\n  'bot-added'(client: Bot): void\n  'bot-removed'(client: Bot): void\n  'bot-status-updated'(client: Bot): void\n  'bot-connect'(client: Bot): Awaitable<void>\n  'bot-disconnect'(client: Bot): Awaitable<void>\n}\n\nexport interface Context {\n  [Context.config]: Context.Config\n  [Context.events]: Events<this>\n  bots: Bot[] & Dict<Bot> & { counter: number }\n}\n\nexport class Context extends cordis.Context {\n  static readonly session = Symbol('session')\n\n  constructor(options?: Context.Config) {\n    super(options)\n\n    this.on('internal/warning', (format, ...args) => {\n      this.logger('app').warn(format, ...args)\n    })\n  }\n\n  logger(name: string) {\n    return new Logger(name)\n  }\n}\n\nexport namespace Context {\n  export interface Config extends cordis.Context.Config {}\n\n  export const Config: Config.Static = Schema.intersect([\n    Schema.object({}),\n  ])\n\n  namespace Config {\n    export interface Static extends Schema<Config> {}\n  }\n}\n\nSession.prototype[Context.filter] = function (ctx: Context) {\n  return ctx.filter(this)\n}\n\nContext.service('selector', Selector)\n\nContext.service('bots', class {\n  constructor(root: Context) {\n    const list: Bot[] = []\n    let counter = 0\n    return new Proxy(list, {\n      get(target, prop) {\n        if (prop in target || typeof prop === 'symbol') {\n          return target[prop]\n        }\n        if (prop === 'counter') return counter++\n        return list.find(bot => bot.sid === prop)\n      },\n      deleteProperty(target, prop) {\n        if (prop in target || typeof prop === 'symbol') {\n          return delete target[prop]\n        }\n        const bot = target.findIndex(bot => bot.sid === prop)\n        if (bot < 0) return true\n        target.splice(bot, 1)\n        return true\n      },\n    })\n  }\n})\n", "import { defineProperty } from 'cosmokit'\nimport { Context } from '.'\nimport { Session } from './session'\n\nexport type Filter = (session: Session) => boolean\n\n/* eslint-disable max-len */\ndeclare module '.' {\n  interface Context {\n    selector: Selector\n    filter: Filter\n    any(): this\n    never(): this\n    union(arg: Filter | this): this\n    intersect(arg: Filter | this): this\n    exclude(arg: Filter | this): this\n    user(...values: string[]): this\n    self(...values: string[]): this\n    guild(...values: string[]): this\n    channel(...values: string[]): this\n    platform(...values: string[]): this\n    private(...values: string[]): this\n  }\n}\n/* eslint-enable max-len */\n\nfunction property<K extends keyof Session>(ctx: Context, key: K, ...values: Session[K][]) {\n  return ctx.intersect((session: Session) => {\n    return values.length ? values.includes(session[key]) : !!session[key]\n  })\n}\n\nexport class Selector {\n  static readonly methods = [\n    'any', 'never', 'union', 'intersect', 'exclude',\n    'user', 'self', 'guild', 'channel', 'platform', 'private',\n  ]\n\n  constructor(private app: Context) {\n    defineProperty(this, Context.current, app)\n\n    app.filter = () => true\n    app.on('internal/runtime', (runtime) => {\n      if (!runtime.uid) return\n      runtime.ctx.filter = (session) => {\n        return runtime.children.some(p => p.ctx.filter(session))\n      }\n    })\n  }\n\n  protected get caller() {\n    return this[Context.current] as Context\n  }\n\n  any() {\n    return this.caller.extend({ filter: () => true })\n  }\n\n  never() {\n    return this.caller.extend({ filter: () => false })\n  }\n\n  union(arg: Filter | Context) {\n    const caller = this.caller\n    const filter = typeof arg === 'function' ? arg : arg.filter\n    return this.caller.extend({ filter: s => caller.filter(s) || filter(s) })\n  }\n\n  intersect(arg: Filter | Context) {\n    const caller = this.caller\n    const filter = typeof arg === 'function' ? arg : arg.filter\n    return this.caller.extend({ filter: s => caller.filter(s) && filter(s) })\n  }\n\n  exclude(arg: Filter | Context) {\n    const caller = this.caller\n    const filter = typeof arg === 'function' ? arg : arg.filter\n    return this.caller.extend({ filter: s => caller.filter(s) && !filter(s) })\n  }\n\n  user(...values: string[]) {\n    return property(this.caller, 'userId', ...values)\n  }\n\n  self(...values: string[]) {\n    return property(this.caller, 'selfId', ...values)\n  }\n\n  guild(...values: string[]) {\n    return property(this.caller, 'guildId', ...values)\n  }\n\n  channel(...values: string[]) {\n    return property(this.caller, 'channelId', ...values)\n  }\n\n  platform(...values: string[]) {\n    return property(this.caller, 'platform', ...values)\n  }\n\n  private(...values: string[]) {\n    return property(this.caller.exclude(property(this.caller, 'guildId')), 'userId', ...values)\n  }\n}\n", "import { defineProperty } from 'cosmokit'\nimport { Context } from '.'\nimport { Bot } from './bot'\nimport { Universal } from './universal'\nimport segment from '@satorijs/element'\n\nexport interface SendOptions {\n  session?: Session\n}\n\nexport interface Session extends Session.Payload, Satori.Session {}\n\nexport namespace Session {\n  export interface Payload {\n    platform: string\n    selfId: string\n    type?: string\n    subtype?: string\n    subsubtype?: string\n    messageId?: string\n    channelId?: string\n    guildId?: string\n    userId?: string\n    content?: string\n    elements?: segment[]\n    timestamp?: number\n    author?: Universal.Author\n    quote?: Universal.Message\n    channelName?: string\n    guildName?: string\n    operatorId?: string\n    targetId?: string\n    duration?: number\n  }\n}\n\nexport class Session {\n  public id: string\n  public bot: Bot\n  public app: Context\n\n  constructor(bot: Bot, payload?: Partial<Session.Payload>) {\n    Object.assign(this, payload)\n    this.selfId = bot.selfId\n    this.platform = bot.platform\n    defineProperty(this, 'bot', bot)\n    defineProperty(this, 'app', bot.ctx.root)\n    defineProperty(this, 'id', bot.ctx.bots.counter)\n    this.initialize()\n  }\n\n  initialize() {}\n\n  get uid() {\n    return `${this.platform}:${this.userId}`\n  }\n\n  get gid() {\n    return `${this.platform}:${this.guildId}`\n  }\n\n  get cid() {\n    return `${this.platform}:${this.channelId}`\n  }\n\n  get sid() {\n    return `${this.platform}:${this.selfId}`\n  }\n\n  get content() {\n    return this.elements.join('')\n  }\n\n  set content(value: string) {\n    this.elements = segment.parse(value)\n  }\n\n  toJSON(): Session.Payload {\n    return Object.fromEntries(Object.entries(this).filter(([key]) => {\n      return !key.startsWith('_') && !key.startsWith('$')\n    })) as any\n  }\n}\n", "import { remove } from 'cosmokit'\nimport { Context } from '.'\nimport { Adapter } from './adapter'\nimport { Session } from './session'\nimport { Universal } from './universal'\nimport WebSocket from 'ws'\n\nexport interface Bot extends Universal.Methods, Universal.User {\n  socket?: WebSocket\n}\n\nexport abstract class Bot<T extends Bot.Config = Bot.Config> {\n  static reusable = true\n\n  public isBot = true\n  public hidden = false\n  public platform: string\n  public selfId: string\n  public internal?: any\n  public adapter?: Adapter<this>\n  public error?: Error\n\n  protected context: Context\n  protected _status: Bot.Status = 'offline'\n\n  constructor(public ctx: Context, public config: T) {\n    if (config.platform) {\n      this.platform = config.platform\n    }\n    if (config.selfId) {\n      this.selfId = config.selfId\n    }\n\n    this.context = ctx\n    ctx.bots.push(this)\n    this.context.emit('bot-added', this)\n    ctx.on('ready', () => this.start())\n    ctx.on('dispose', () => {\n      remove(ctx.bots, this)\n      this.context.emit('bot-removed', this)\n      this.stop()\n    })\n  }\n\n  get status() {\n    return this._status\n  }\n\n  set status(value) {\n    this._status = value\n    if (this.ctx.bots.includes(this)) {\n      this.context.emit('bot-status-updated', this)\n    }\n  }\n\n  online() {\n    this.status = 'online'\n    this.error = null\n  }\n\n  offline(error?: Error) {\n    this.status = 'offline'\n    this.error = error\n  }\n\n  async start() {\n    if (['connect', 'reconnect', 'online'].includes(this.status)) return\n    this.status = 'connect'\n    try {\n      await this.context.parallel('bot-connect', this)\n      await this.adapter.start(this)\n    } catch (error) {\n      this.offline(error)\n    }\n  }\n\n  async stop() {\n    if (['disconnect', 'offline'].includes(this.status)) return\n    this.status = 'disconnect'\n    try {\n      await this.context.parallel('bot-disconnect', this)\n      await this.adapter.stop(this)\n    } catch (error) {\n      this.context.emit('internal/warning', error)\n      this.offline()\n    }\n  }\n\n  get sid() {\n    return `${this.platform}:${this.selfId}`\n  }\n\n  session(payload?: Partial<Session.Payload>) {\n    return new Session(this, payload)\n  }\n\n  dispatch(session: Session) {\n    if (!this.ctx.lifecycle.isActive) return\n    const events: string[] = [session.type]\n    if (session.subtype) {\n      events.unshift(events[0] + '/' + session.subtype)\n      if (session.subsubtype) {\n        events.unshift(events[0] + '/' + session.subsubtype)\n      }\n    }\n    for (const event of events) {\n      this.context.emit(session, event as any, session)\n    }\n  }\n}\n\nexport namespace Bot {\n  export interface Config {\n    platform?: string\n    selfId?: string\n  }\n\n  export type Status = 'offline' | 'online' | 'connect' | 'disconnect' | 'reconnect'\n}\n", "import { Awaitable, remove, Time } from 'cosmokit'\nimport { Context } from '.'\nimport { Bot } from './bot'\nimport Schema from 'schemastery'\nimport Logger from 'reggol'\nimport WebSocket from 'ws'\n\nconst logger = new Logger('adapter')\n\nexport abstract class Adapter<T extends Bot = Bot> {\n  static schema = false\n\n  async start(bot: T) {}\n  async stop(bot: T) {}\n}\n\nexport namespace Adapter {\n  export abstract class Client<T extends Bot = Bot> extends Adapter<T> {\n    static reusable = true\n\n    constructor(protected ctx: Context, protected bot: T) {\n      super()\n      bot.adapter = this\n    }\n  }\n\n  export abstract class Server<T extends Bot = Bot> extends Adapter<T> {\n    public bots: T[] = []\n\n    fork(ctx: Context, bot: T) {\n      bot.adapter = this\n      this.bots.push(bot)\n      ctx.on('dispose', () => {\n        remove(this.bots, bot)\n      })\n    }\n  }\n\n  export namespace WsClient {\n    export interface Config extends Bot.Config {\n      retryLazy?: number\n      retryTimes?: number\n      retryInterval?: number\n    }\n  }\n\n  export abstract class WsClient<T extends Bot<WsClient.Config>> extends Adapter.Client<T> {\n    static reusable = true\n\n    static Config: Schema<Adapter.WsClient.Config> = Schema.object({\n      retryTimes: Schema.natural().description('初次连接时的最大重试次数。').default(6),\n      retryInterval: Schema.natural().role('ms').description('初次连接时的重试时间间隔。').default(5 * Time.second),\n      retryLazy: Schema.natural().role('ms').description('连接关闭后的重试时间间隔。').default(Time.minute),\n    }).description('连接设置')\n\n    protected abstract prepare(bot: T): Awaitable<WebSocket>\n    protected abstract accept(bot: T): void\n\n    async start(bot: T) {\n      let _retryCount = 0\n      const { retryTimes, retryInterval, retryLazy } = bot.config\n\n      const reconnect = async (initial = false) => {\n        logger.debug('websocket client opening')\n        const socket = await this.prepare(bot)\n        const url = socket.url.replace(/\\?.+/, '')\n\n        socket.onerror = error => logger.debug(error)\n\n        socket.onclose = ({ code, reason }) => {\n          bot.socket = null\n          logger.debug(`websocket closed with ${code}`)\n          if (bot.status === 'disconnect') {\n            return bot.status = 'offline'\n          }\n\n          // remove query args to protect privacy\n          const message = reason.toString() || `failed to connect to ${url}, code: ${code}`\n          let timeout = retryInterval\n          if (_retryCount >= retryTimes) {\n            if (initial) {\n              bot.error = new Error(message)\n              return bot.status = 'offline'\n            } else {\n              timeout = retryLazy\n            }\n          }\n\n          _retryCount++\n          bot.status = 'reconnect'\n          logger.warn(`${message}, will retry in ${Time.format(timeout)}...`)\n          setTimeout(() => {\n            if (bot.status === 'reconnect') reconnect()\n          }, timeout)\n        }\n\n        socket.onopen = () => {\n          _retryCount = 0\n          bot.socket = socket\n          logger.info('connect to server: %c', url)\n          this.accept(bot)\n        }\n      }\n\n      reconnect(true)\n    }\n\n    async stop(bot: T) {\n      bot.socket?.close()\n    }\n  }\n}\n", "import { defineProperty } from 'cosmokit'\nimport segment from '@satorijs/element'\nimport { Bot } from './bot'\nimport { SendOptions, Session } from './session'\n\nclass AggregateError extends Error {\n  constructor(public errors: Error[], message = '') {\n    super(message)\n  }\n}\n\nexport abstract class Messenger<B extends Bot = Bot> {\n  public errors: Error[] = []\n  public results: Session[] = []\n  public session: Session\n\n  constructor(public bot: B, public channelId: string, public guildId?: string, public options?: SendOptions) {\n    this.session = bot.session({\n      type: 'send',\n      author: bot,\n      channelId,\n      guildId,\n      subtype: guildId ? 'group' : 'private',\n    })\n    defineProperty(this.session, bot.platform, Object.create(bot.internal))\n  }\n\n  abstract flush(): Promise<void>\n  abstract visit(element: segment): Promise<void>\n\n  async render(elements: segment[], flush?: boolean) {\n    for (const element of elements) {\n      await this.visit(element)\n    }\n    if (flush) {\n      await this.flush()\n    }\n  }\n\n  async send(content: segment.Fragment) {\n    this.session.elements = segment.normalize(content)\n    if (await this.session.app.serial(this.session, 'before-send', this.session, this.options)) return\n    await this.render(this.session.elements)\n    await this.flush()\n    if (this.errors.length) {\n      throw new AggregateError(this.errors)\n    } else {\n      return this.results.map(result => result.messageId)\n    }\n  }\n}\n\nexport { Messenger as Modulator }\n"],
  "mappings": "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",
  "names": ["segment", "Logger", "Quester", "Schema", "import_cosmokit", "segment", "import_schemastery", "import_reggol", "import_element", "import_cosmokit", "import_cosmokit", "Logger", "Adapter", "Schema", "import_cosmokit", "import_element", "segment", "Logger", "Context", "Schema", "bot"]
}
